/ {
  behaviors {

    /*
      * Sticky shift + Caps Word
      *
      * Usage: &l_shift_morph or &r_shift_morph
      * Tap: Sticky shift
      * HMR-Shift-Tap: Caps Word
      * Double Tap: Caps Word
      *   - The first tap activates sticky shift mod
      *   - The second tap is now a shift + press, which activates
      *     the mod morph
      * Hold: Shift
      *
      * Credits to urob for this genius combo.
      */
    l_shift_morph: shift_morph {
        compatible = "zmk,behavior-mod-morph";
        label = "SHIFT_MORPH";
        #binding-cells = <0>;

        #ifdef HAS_CAPSLOCK
            bindings = <&sk LSHFT>, <&caps_word_capslock>;
        #else
            bindings = <&sk LSHFT>, <&caps_word>;
        #endif

        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    r_shift_morph: r_shift_morph {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;

        #ifdef HAS_CAPSLOCK
            bindings = <&sk RSHFT>, <&caps_word_capslock>;
        #else
            bindings = <&sk RSHFT>, <&caps_word>;
        #endif

        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    /*
      * Sticky shift + Caps Word
      *
      * Usage: &esc_morph
      * Tap: esc
      * HMR-Shift-Tap: Caps Word
      * Hold: switch to adjust layer
      *
      * Credits to urob for this genius combo.
      */
    esc_morph: esc_morph {
        compatible = "zmk,behavior-mod-morph";
        label = "ESC_MORPH";
        #binding-cells = <0>;

        #ifdef HAS_CAPSLOCK
            bindings = <&lt ADJUST ESC>, <&caps_word_capslock>;
        #else
            bindings = <&lt ADJUST ESC>, <&caps_word>;
        #endif

        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    /*
      * Shifted Backspace deletes
      *
      * Usage: &bspc_morph
      * Tap: Backspace
      * Shift-Tap: Delete
      * Hold: switch num layer
      */
    bspc_morph: bspc_morph {
        compatible = "zmk,behavior-mod-morph";
        label = "BSPC_MORPH";
        #binding-cells = <0>;
        bindings = <&lt NUM BSPC>, <&kp DEL>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    /*
      * Shifted comma types semicoln
      *
      * Usage: &comma_morph
      * Tap: ,
      * Shift-Tap: ;
      */
    comma_morph: comma_morph {
      compatible = "zmk,behavior-mod-morph";
      label = "COMMA_MORPH";
      #binding-cells = <0>;
      bindings = <&kp COMMA>, <&kp SEMI>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    /*
      * Shifted dot types colon
      *
      * Usage: &dot_morph
      * Tap: .
      * Shift-Tap: :
      */
    dot_morph: dot_morph {
      compatible = "zmk,behavior-mod-morph";
      label = "DOT_MORPH";
      #binding-cells = <0>;
      bindings = <&kp DOT>, <&kp COLON>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    /*
      * Shifted qmark types excl
      *
      * Usage: &qmark_morph
      * Tap: ?
      * Shift-Tap: !
      */
    qmark_morph: qmark_morph {
      compatible = "zmk,behavior-mod-morph";
      label = "QMARK_MORPH";
      #binding-cells = <0>;
      bindings = <&kp QMARK>, <&kp EXCL>;
      mods = <(MOD_RSFT|MOD_LSFT)>;
    };
    /*
      * Shifted plus types minus (-)
      *
      * Usage: &plus_morph
      * Tap: `
      * Shift-Tap: ^
      */
    plus_morph: plus_morph {
        compatible = "zmk,behavior-mod-morph";
        label = "PLUS_MORPH";
        #binding-cells = <0>;
        bindings = <&kp PLUS>, <&kp MINUS>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
  };
};
